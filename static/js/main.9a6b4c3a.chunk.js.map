{"version":3,"sources":["p2-features/f1-auth/a1-login/Login.module.css","p1-main/m1-ui/u2-header/Header.module.css","p1-main/m1-ui/u1-common/input/Input.module.css","p1-main/m1-ui/u1-common/button/Button.module.css","p2-features/f1-auth/a2-register/Registration.module.css","p2-features/f1-auth/a3-removePassword/RestorePassword.module.css","p2-features/f1-auth/a5-setNewPassword/setNewPassword.module.css","p2-features/f1-auth/a4-profile/Profile.module.css","p1-main/m1-ui/u2-header/Header.tsx","p1-main/m1-ui/routes.js","p1-main/m1-ui/u1-common/input/Input.tsx","p1-main/m1-ui/u1-common/button/Button.tsx","p2-features/f1-auth/a1-login/Login.tsx","p2-features/f1-auth/a2-register/Registration.tsx","p2-features/f1-auth/a3-removePassword/RestorePassword.tsx","p2-features/f1-auth/a5-setNewPassword/setNewPassword.tsx","p2-features/f1-auth/a4-profile/Profile.tsx","p1-main/m1-ui/App.tsx","serviceWorker.ts","p1-main/m2-bll/RegisterReducer.ts","p1-main/m2-bll/LoginReduser.ts","p1-main/m2-bll/RestorePasswordReducer.ts","p1-main/m2-bll/ProfileReducer.ts","p1-main/m2-bll/setNewPasswordReducer.ts","p1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Header","props","className","s","header","to","Input","inputForm","type","inputType","placeholder","inputPlaceholder","Button","buttonForm","buttonTitle","Login","login","useSelector","state","onChange","loginForm","value","forgetPassword","Registration","reg","registration","regForm","RestorePassword","restore","restoreForm","SetNewPassword","setNewPassword","Profile","profile","profilePage","App","useState","isHidden","setIsHidden","handleClick","path","component","Boolean","window","location","hostname","match","initialState","loading","isAuth","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,eAAiB,gC,mBCAxED,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,UAAY,2B,gBCA9BD,EAAOC,QAAU,CAAC,WAAa,6B,iBCA/BD,EAAOC,QAAU,CAAC,QAAU,gC,gBCA5BD,EAAOC,QAAU,CAAC,YAAc,uC,gBCAhCD,EAAOC,QAAU,CAAC,QAAU,kC,gBCA5BD,EAAOC,QAAU,CAAC,YAAc,+B,uMCSnBC,EAAS,SAACC,GAEtB,OAAO,yBAAKC,UAAWC,IAAEC,QACrB,kBAAC,IAAD,CAASC,GCbO,UDahB,WACA,kBAAC,IAAD,CAASA,GCbc,iBDavB,a,yCEHQC,EAAQ,SAACL,GAClB,OACI,yBAAKC,UAAWC,IAAEI,WACd,2BACIC,KAAMP,EAAMQ,UACZC,YAAaT,EAAMU,qB,iBCTtBC,EAAS,SAACX,GACnB,OACI,6BAAK,4BAAQC,UAAWC,IAAEU,YAAaZ,EAAMa,e,OCQxCC,EAAQ,SAACd,GAClB,IAAMe,EAAaC,aAA0B,SAAAC,GAAK,OAAIA,EAAMF,SAKtDG,EAAW,aAKjB,OACI,0BAAMjB,UAAWC,IAAEiB,WACf,kBAAC,EAAD,CACIX,UAAWO,EAAMP,UAAU,GAC3BE,iBAAkBK,EAAML,iBAAiB,GACzCU,MAAOL,EAAMK,MACbF,SAAUA,IAGd,kBAAC,EAAD,CACIV,UAAWO,EAAMP,UAAU,GAC3BE,iBAAkBK,EAAML,iBAAiB,GACzCU,MAAOL,EAAMK,MACbF,SAAUA,IAEd,kBAAC,IAAD,CAASd,GHzCE,mBGyCWH,UAAWC,IAAEmB,gBAAnC,mBACA,kBAAC,EAAD,CAAQR,YAAaE,EAAMF,gB,iBCpC1BS,EAAe,WAExB,IAAMC,EAAWP,aAA0B,SAACC,GAAD,OAAWA,EAAMO,gBAKtDN,EAAW,aAIjB,OACI,0BAAMjB,UAAWC,IAAEuB,SACf,kBAAC,EAAD,CACIjB,UAAWe,EAAIf,UAAU,GACzBE,iBAAkBa,EAAIb,iBAAiB,GACvCU,MAAOG,EAAIH,MACXF,SAAUA,IAGd,kBAAC,EAAD,CACIV,UAAWe,EAAIf,UAAU,GACzBE,iBAAkBa,EAAIb,iBAAiB,GACvCU,MAAOG,EAAIH,MACXF,SAAUA,IAGd,kBAAC,EAAD,CACIV,UAAWe,EAAIf,UAAU,GACzBE,iBAAkBa,EAAIb,iBAAiB,GACvCU,MAAOG,EAAIH,MACXF,SAAUA,IAGd,kBAAC,EAAD,CAAQL,YAAaU,EAAIV,gB,iBChCxBa,EAAkB,WAE3B,IAAMC,EAAeX,aAA0B,SAACC,GAAD,OAAWA,EAAMU,WAOhE,OAAO,0BAAM1B,UAAWC,IAAE0B,aAClB,kBAAC,EAAD,CAAOpB,UAAWmB,EAAQnB,UAAU,GAAIE,iBAAkBiB,EAAQjB,iBAAiB,GAAIQ,SAN9E,eAOb,kBAAC,IAAD,CAASd,GLrBI,UKqBb,IAAqB,kBAAC,EAAD,CAAQS,YAAac,EAAQd,iB,iBCX7CgB,EAAiB,WAE1B,IAAMC,EAAsBd,aAA0B,SAACC,GAAD,OAAWA,EAAMa,kBAKjEZ,EAAW,aAIjB,OACI,0BAAMjB,UAAWC,IAAEuB,SACf,kBAAC,EAAD,CACIjB,UAAWsB,EAAetB,UAAU,GACpCE,iBAAkBoB,EAAepB,iBAAiB,GAClDU,MAAOU,EAAeV,MACtBF,SAAUA,IAGd,kBAAC,EAAD,CACIV,UAAWsB,EAAetB,UAAU,GACpCE,iBAAkBoB,EAAepB,iBAAiB,GAClDU,MAAOU,EAAeV,MACtBF,SAAUA,IAGd,kBAAC,IAAD,CAASd,GNrCA,UMqCW,kBAAC,EAAD,CAAQS,YAAaiB,EAAejB,iB,iBC7BvDkB,EAAU,WAEEf,aAA0B,SAACC,GAAD,OAAWA,EAAMe,WAShE,OACG,yBAAK/B,UAAWC,IAAE+B,aAAlB,+BCRMC,EAAM,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACdC,EADc,KACJC,EADI,KAMrB,OACI,yBAAKpC,UAAU,OACX,kBAAC,EAAD,CAAQqC,YALI,WAChBD,GAAY,MAKR,kBAAC,IAAD,CAAOE,KRrBE,SQqBWC,UAAW1B,IAC/B,kBAAC,IAAD,CAAOyB,KRrBS,gBQqBWC,UAAWlB,IACtC,kBAAC,IAAD,CAAOiB,KRrBI,mBQqBWC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KRpBW,kBQoBWC,UAAWX,IACxC,kBAAC,IAAD,CAAOU,KRtBI,WQsBWC,UAAWT,IAEjC,yBAAK9B,UAAU,WACVmC,EACC,8DACA,MClBEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCRAC,EAAiC,CACnCjC,YAAa,UACbkC,SAAS,EACTvC,UAAW,CAAC,OAAQ,YACpBE,iBAAkB,CAAC,SAAU,WAAY,cACzCsC,QAAQ,GCLNF,EAAiC,CACnCjC,YAAa,UACbkC,SAAS,EACTvC,UAAW,CAAC,OAAQ,YACpBE,iBAAkB,CAAC,WAAY,cAC/BsC,QAAQ,GCLNF,EAAiC,CACnCjC,YAAa,gBACbkC,SAAS,EACTvC,UAAW,CAAC,QACZE,iBAAkB,CAAC,uBACnBsC,QAAQ,GCVNF,EAAiC,GCKjCA,EAAiC,CACnCjC,YAAa,mBACbkC,SAAS,EACTvC,UAAW,CAAC,YACZE,iBAAkB,CAAC,sBACnBsC,QAAQ,GCRNC,EAAcC,YAAgB,CAChCnC,MJUwB,WAA2D,IAA1DE,EAAyD,uDAA/B6B,EAA+B,iCAClF,OAAO7B,GIVPO,aLS2B,WAA2D,IAA1DP,EAAyD,uDAA/B6B,EAA+B,iCACrF,OAAO7B,GKTPU,QHQkC,WAA2D,IAA1DV,EAAyD,uDAA/B6B,EAA+B,iCAC5F,OAAO7B,GGRPe,QFF0B,WAA2D,IAA1Df,EAAyD,uDAA/B6B,EAA+B,iCACpF,OAAO7B,GEEPa,eDMiC,WAA2D,IAA1Db,EAAyD,uDAA/B6B,EAA+B,iCAC3F,OAAO7B,KCJEkC,EAAQC,YAAYH,GCNjCI,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,QAIRI,SAASC,eAAe,SP2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAApC,GACJA,EAAaqC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a6b4c3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__3Q7i0\",\"forgetPassword\":\"Login_forgetPassword__3EsWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Y_Il\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"Input_inputForm__3KUI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonForm\":\"Button_buttonForm__JEW0q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regForm\":\"Registration_regForm__1B8oq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restoreForm\":\"RestorePassword_restoreForm__2SWLc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regForm\":\"setNewPassword_regForm__Pptrg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"Profile_profilePage__UzUd7\"};","import React from \"react\";\r\nimport {login, registration} from \"../routes\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    handleClick: () => void\r\n}\r\n\r\nexport const Header = (props: PropsType) => {\r\n\r\n return <div className={s.header} >\r\n     <NavLink to={login}>Sing in</NavLink>\r\n     <NavLink to={registration}>Sing up</NavLink>\r\n </div>\r\n}","export const login = '/login';\r\nexport const registration = '/registration';\r\nexport const restore = '/restorePassword';\r\nexport const profile = '/profile';\r\nexport const setNewPassword = '/setNewPassword';","import React from \"react\";\r\nimport s from './Input.module.css';\r\n\r\ntype PropsType = {\r\n    inputType: string\r\n    inputPlaceholder: string\r\n    onChange: () => void\r\n    value?: string\r\n\r\n}\r\n\r\nexport const Input = (props: PropsType) => {\r\n    return (\r\n        <div className={s.inputForm}>\r\n            <input\r\n                type={props.inputType}\r\n                placeholder={props.inputPlaceholder}/>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    buttonTitle: string\r\n}\r\n\r\nexport const Button = (props: PropsType) => {\r\n    return (\r\n        <div><button className={s.buttonForm}>{props.buttonTitle}</button></div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Login.module.css';\r\nimport {Input} from \"../../../p1-main/m1-ui/u1-common/input/Input\";\r\nimport {Button} from \"../../../p1-main/m1-ui/u1-common/button/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../p1-main/m2-bll/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {restore} from \"../../../p1-main/m1-ui/routes\";\r\n\r\n\r\ntype PropsType = {\r\n    onClick: () => void\r\n    onChange: () => void\r\n    value?: string\r\n\r\n}\r\n\r\nexport const Login = (props: PropsType) => {\r\n    const login: any = useSelector<AppStateType>(state => state.login)\r\n\r\n    const onClick = () => {\r\n\r\n    }\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <form className={s.loginForm}>\r\n            <Input\r\n                inputType={login.inputType[0]}\r\n                inputPlaceholder={login.inputPlaceholder[0]}\r\n                value={login.value}\r\n                onChange={onChange}\r\n\r\n        />\r\n            <Input\r\n                inputType={login.inputType[1]}\r\n                inputPlaceholder={login.inputPlaceholder[1]}\r\n                value={login.value}\r\n                onChange={onChange}\r\n            />\r\n            <NavLink to={restore} className={s.forgetPassword}>Forget password</NavLink>\r\n            <Button buttonTitle={login.buttonTitle}/>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Registration.module.css';\r\nimport {Input} from \"../../../p1-main/m1-ui/u1-common/input/Input\";\r\nimport {Button} from \"../../../p1-main/m1-ui/u1-common/button/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../p1-main/m2-bll/store\";\r\n\r\n\r\nexport const Registration = () => {\r\n\r\n    const reg: any = useSelector<AppStateType>((state) => state.registration)\r\n\r\n    const onClick = () => {\r\n\r\n    }\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <form className={s.regForm}>\r\n            <Input\r\n                inputType={reg.inputType[0]}\r\n                inputPlaceholder={reg.inputPlaceholder[0]}\r\n                value={reg.value}\r\n                onChange={onChange}\r\n\r\n            />\r\n            <Input\r\n                inputType={reg.inputType[0]}\r\n                inputPlaceholder={reg.inputPlaceholder[1]}\r\n                value={reg.value}\r\n                onChange={onChange}\r\n\r\n            />\r\n            <Input\r\n                inputType={reg.inputType[1]}\r\n                inputPlaceholder={reg.inputPlaceholder[2]}\r\n                value={reg.value}\r\n                onChange={onChange}\r\n\r\n            />\r\n            <Button buttonTitle={reg.buttonTitle}/>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './RestorePassword.module.css';\r\nimport {Input} from \"../../../p1-main/m1-ui/u1-common/input/Input\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../p1-main/m2-bll/store\";\r\nimport {Button} from \"../../../p1-main/m1-ui/u1-common/button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {login} from \"../../../p1-main/m1-ui/routes\";\r\n\r\n\r\nexport const RestorePassword = () => {\r\n\r\n    const restore: any = useSelector<AppStateType>((state) => state.restore)\r\n\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n\r\n    return <form className={s.restoreForm} >\r\n            <Input inputType={restore.inputType[0]} inputPlaceholder={restore.inputPlaceholder[0]} onChange={onChange}/>\r\n        <NavLink to={login}> <Button buttonTitle={restore.buttonTitle}/></NavLink>\r\n        </form>\r\n\r\n}","import React from \"react\";\r\nimport s from './setNewPassword.module.css';\r\nimport {Input} from \"../../../p1-main/m1-ui/u1-common/input/Input\";\r\nimport {Button} from \"../../../p1-main/m1-ui/u1-common/button/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../p1-main/m2-bll/store\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {login} from \"../../../p1-main/m1-ui/routes\";\r\n\r\n\r\nexport const SetNewPassword = () => {\r\n\r\n    const setNewPassword: any = useSelector<AppStateType>((state) => state.setNewPassword)\r\n\r\n    const onClick = () => {\r\n\r\n    }\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <form className={s.regForm}>\r\n            <Input\r\n                inputType={setNewPassword.inputType[0]}\r\n                inputPlaceholder={setNewPassword.inputPlaceholder[0]}\r\n                value={setNewPassword.value}\r\n                onChange={onChange}\r\n\r\n            />\r\n            <Input\r\n                inputType={setNewPassword.inputType[0]}\r\n                inputPlaceholder={setNewPassword.inputPlaceholder[0]}\r\n                value={setNewPassword.value}\r\n                onChange={onChange}\r\n\r\n            />\r\n            <NavLink to={login}><Button buttonTitle={setNewPassword.buttonTitle}/></NavLink>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../p1-main/m2-bll/store\";\r\nimport s from './Profile.module.css';\r\n\r\n\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const profile: any = useSelector<AppStateType>((state) => state.profile)\r\n\r\n    const onClick = () => {\r\n\r\n    }\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    return (\r\n       <div className={s.profilePage}>your profile will be here </div>\r\n    )\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport {Header} from \"./u2-header/Header\";\nimport {Route} from 'react-router-dom'\nimport {Login} from \"../../p2-features/f1-auth/a1-login/Login\";\nimport {login, profile, registration, restore, setNewPassword} from \"./routes\";\nimport {Registration} from \"../../p2-features/f1-auth/a2-register/Registration\";\nimport {RestorePassword} from \"../../p2-features/f1-auth/a3-removePassword/RestorePassword\";\nimport {SetNewPassword} from \"../../p2-features/f1-auth/a5-setNewPassword/setNewPassword\";\nimport {Profile} from \"../../p2-features/f1-auth/a4-profile/Profile\";\n\n\nexport const App = () => {\n    const [isHidden, setIsHidden] = useState(true);\n\n    const handleClick = ():void => {\n        setIsHidden(false);\n    }\n    return (\n        <div className=\"App\">\n            <Header handleClick={handleClick}/>\n            <Route path={login} component={Login} />\n            <Route path={registration} component={Registration} />\n            <Route path={restore} component={RestorePassword} />\n            <Route path={setNewPassword} component={SetNewPassword} />\n            <Route path={profile} component={Profile} />\n\n            <div className='appText'>\n                {isHidden\n                ? <span>you will remember everything</span>\n                : ''\n            }</div>\n\n        </div>\n    );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\ntype initialStateType = {\r\n    buttonTitle: string\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    inputPlaceholder: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    buttonTitle: 'Sing up',\r\n    loading: false,\r\n    inputType: ['text', 'password'],\r\n    inputPlaceholder: ['  Name', '  E-mail', '  Password'],\r\n    isAuth: false\r\n}\r\n\r\nexport const RegisterReducer = (state: initialStateType = initialState, action : any) => {\r\n    return state;\r\n}\r\n\r\n","\r\ntype initialStateType = {\r\n    buttonTitle: string\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    inputPlaceholder: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    buttonTitle: 'Sing in',\r\n    loading: false,\r\n    inputType: ['text', 'password'],\r\n    inputPlaceholder: ['  E-mail', '  Password'],\r\n    isAuth: false\r\n}\r\n\r\nexport const LoginReducer = (state: initialStateType = initialState, action : any) => {\r\n    return state;\r\n}\r\n\r\n","\r\ntype initialStateType = {\r\n    buttonTitle: string\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n    inputPlaceholder: Array<string>\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    buttonTitle: 'Send password',\r\n    loading: false,\r\n    inputType: ['text'],\r\n    inputPlaceholder: ['  Entry your e-mail'],\r\n    isAuth: false\r\n}\r\n\r\nexport const RestorePasswordReducer = (state: initialStateType = initialState, action : any) => {\r\n    return state;\r\n}\r\n\r\n","\r\ntype initialStateType = {\r\n\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n\r\n}\r\n\r\nexport const ProfileReducer = (state: initialStateType = initialState, action : any) => {\r\n    return state;\r\n}\r\n\r\n","\r\ntype initialStateType = {\r\n    buttonTitle: string\r\n    loading: boolean\r\n    inputType: Array<string>\r\n    value?: string\r\n    isAuth: boolean\r\n    inputPlaceholder: Array<string>\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    buttonTitle: 'Set new password',\r\n    loading: false,\r\n    inputType: ['password'],\r\n    inputPlaceholder: ['  Set new password'],\r\n    isAuth: false\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialStateType = initialState, action : any) => {\r\n    return state;\r\n}\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport { RegisterReducer } from \"./RegisterReducer\";\r\nimport { LoginReducer } from \"./LoginReduser\";\r\nimport {RestorePasswordReducer} from \"./RestorePasswordReducer\";\r\nimport {ProfileReducer} from \"./ProfileReducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: LoginReducer,\r\n    registration: RegisterReducer,\r\n    restore: RestorePasswordReducer,\r\n    profile: ProfileReducer,\r\n    setNewPassword: setNewPasswordReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\ntype RootReducersType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducersType>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './p1-main/m1-ui/App';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./p1-main/m2-bll/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}